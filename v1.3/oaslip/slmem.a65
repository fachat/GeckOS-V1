
/****************************************************************************
   
    OS/A65 Version 1.3.11
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1997 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

/**********************************************************************/
/* New memory management for IP buffers 			      */
/* exports							      */
/* 	binit							      */
/* 	balloc, bfree, btrunc, bsplit, brealloc			      */
/*	getbadr, getblen					      */

/*#define	DEBUGMEM*/

#define	MINBUF	8
#define	MINMASK	%11111000

	.(

slotladr =sysmem
slothadr =sysmem+MAXSLOT
slotllen =sysmem+MAXSLOT*2
slothlen =sysmem+MAXSLOT*3
slotrlln =sysmem+MAXSLOT*4
slotrhln =sysmem+MAXSLOT*5

-sysmem	+=MAXSLOT*6

flist 	=sysmem
slot	=sysmem+2
-sysmem	+=3

p	=syszp
p2	=syszp+2
p3	=syszp+4
p4	=syszp+6
-syszp	+=8

-sysblk	-=IPBUFFER
buf	=sysblk

/* init memory management */
&binit	.(
	lda #0
	tay
l0	sta slotladr,y
	sta slothadr,y
	iny
	cpy #MAXSLOT
	bcc l0

	sta buf		; freelist start
	sta buf+1
	lda #<IPBUFFER
	sta buf+2
	lda #>IPBUFFER
	sta buf+3
	
	lda #<buf
	sta flist
	lda #>buf
	sta flist+1

	clc
	rts
	.)

/* a/y = size of buffer to be allocated -> x buffer-ID */       
&balloc	.(
	/* walk along freelist, and take first matching buffer 
	   length is made a multiple of 8 (for freelist connectors */

	pha
	jsr getbslot
	pla
	bcc gotslot
	lda #E_NOMEM
	rts
gotslot
	stx slot

	sta slotrlln,x
	pha
	tya
	sta slotrhln,x
	pla

	adc #MINBUF-1
	and #MINMASK
	sta slotllen,x
	tya
	adc #0
	sta slothlen,x

#ifdef DEBUGMEM
DB("^m^jalloc(")
txa
jsr EHexout
lda slothlen,x
jsr EHexout
lda slotllen,x
jsr EHexout
DB("^m^jFlist=")
lda flist+1
jsr EHexout
lda flist
jsr EHexout
jsr ECrlfout
#endif	
	lda #0
	sta p2
	sta p2+1
	lda flist
	sta p
	lda flist+1
	sta p+1
l0
#if 0	/*def DEBUG*/
DB("^m^jCheck@")
lda p+1:jsr EHexout:lda p:jsr EHexout
jsr ECrlfout
#endif
	ldy #2
	lda (p),y
	sec
	sbc slotllen,x
	sta p3
	iny
	lda (p),y
	sbc slothlen,x
	sta p3+1
	bcs found 

	lda p
	sta p2
	lda p+1
	sta p2+1
	ldy #1
	lda (p2),y
	sta p+1
	dey
	lda (p2),y
	sta p
	ora p+1
	bne l0
	
oops	lda #E_NOMEM
	sec
	rts	

found
	/* ok, we found a free buffer: p points to the buffer, p2 to the
	   previous one. p3 is the length of the free buffer minus the
	   needed size. If the buffer is longer than needed, create a 
	   new free buffer, then link new buffer to freelist */

#if 0	/*def DEBUG*/
DB("^m^jFound Free buffer to alloc:")
DB("^m^jbuffer=")
lda p+1:jsr EHexout:lda p:jsr EHexout
DB("^m^jprevious=")
lda p2+1:jsr EHexout:lda p2:jsr EHexout
DB("^m^jrest len=")
lda p3+1:jsr EHexout:lda p3:jsr EHexout
jsr ECrlfout
#endif

	lda p		/* save buffer address */
	sta slotladr,x
	lda p+1
	sta slothadr,x
		
	lda p3 		/* check length */
	ora p3+1
	beq nocreate
	
	lda p		/* get address of new free buffer */
	clc
	adc slotllen,x
	sta p4
	lda p+1
	adc slothlen,x
	sta p4+1

	ldy #0		/* copy next pointer */
	lda (p),y
	sta (p4),y
	iny
	lda (p),y
	sta (p4),y

	iny		/* set new length */
	lda slotllen,x
	sta (p),y
	lda p3
	sta (p4),y
	iny
	lda slothlen,x
	sta (p),y
	lda p3+1
	sta (p4),y

	lda p4
	sta p
	lda p4+1
	sta p+1

nocreate
	lda p2
	ora p2+1
	beq freestart

	ldy #0
	lda p
	sta (p2),y
	iny
	lda p+1
	sta (p2),y
	clc
	bcc geta
freestart
#if 0	/*def DEBUG*/
DB("^m^jFreestart")
lda p+1:jsr EHexout:lda p:jsr EHexout:jsr ECrlfout
#endif
	lda p
	sta flist
	lda p+1
	sta flist+1
	clc
geta
#ifdef DEBUGMEM
php
DB("^m^jallocated buffer ")
txa: jsr EHexout
lda slothadr,x: jsr EHexout: lda slotladr,x: jsr EHexout
lda slothlen,x: jsr EHexout: lda slotllen,x: jsr EHexout
jsr ECrlfout
plp
#endif
	lda slotladr,x
	ldy slothadr,x
	rts
	.)

/* free buffer (ID=xr) */
&bfree	.( 
	lda slothadr,x
	sta p3+1
	lda slotladr,x
	sta p3
	ora p3+1
	beq end2

#ifdef DEBUGMEM
DB("Freeing Slot ")
txa:jsr EHexout
lda p3+1
jsr EHexout
lda p3
jsr EHexout
lda slothlen,x
jsr EHexout
lda slotllen,x
jsr EHexout
jsr ECrlfout
#endif

	ldy #2
	lda slotllen,x
	sta (p3),y
	iny
	lda slothlen,x
	sta (p3),y	

	lda #0
	sta slothadr,x
	sta slotladr,x

	lda flist
	ora flist+1
	bne ok		/* no free buffer so far? */

	lda p3
	sta flist
	lda p3+1
	sta flist+1
	ldy #0
	tya
	sta (p3),y
	iny
	sta (p3),y
end2	clc
	rts
ok	
	lda #0
	sta p2
	sta p2+1
	lda flist
	sta p
	lda flist+1
	sta p+1

	/* we have to find the place where to put the buffer in the
	   ordered free list. Then we have to check if we can merge
	   free buffers */
loop
#if 0	/*def DEBUGMEM*/
DB("Check slot ")
lda p+1: jsr EHexout:lda p: jsr EHexout
DB("["): ldy #3:lda (p),y:jsr EHexout:dey:lda (p),y:jsr EHexout
DB("]->"):ldy #1:lda (p),y:jsr EHexout:dey:lda (p),y:jsr EHexout
jsr ECrlfout
#endif

	lda p3+1
	cmp p+1
	bcc found
	bne next
	lda p3
	cmp p
	bcc found
next
	lda p
	sta p2
	lda p+1
	sta p2+1
	ldy #0
	lda (p2),y
	sta p
	iny
	lda (p2),y
	sta p+1
	ora p
	bne loop
	beq found
end
	clc
	rts

found	/* p2 is the buffer before the one to be freed, p the one behind.
	   p3 is the buffer to be inserted */

#if 0	/*def DEBUGMEM*/
DB("Found buffer^m^j")
DB("p3=")
lda p3+1:jsr EHexout:lda p3:jsr EHexout:jsr ECrlfout
DB("p2=")
lda p2+1:jsr EHexout:lda p2:jsr EHexout
DB("["):ldy #3:lda (p2),y:jsr EHexout:dey:lda (p2),y:jsr EHexout
DB("]->"):ldy #1:lda (p2),y:jsr EHexout:dey:lda (p2),y:jsr EHexout
jsr ECrlfout
DB("p=")
lda p+1:jsr EHexout:lda p:jsr EHexout
DB("["):ldy #3:lda (p),y:jsr EHexout:dey:lda (p),y:jsr EHexout
DB("]->"):ldy #1:lda (p),y:jsr EHexout:dey:lda (p),y:jsr EHexout
jsr ECrlfout
#endif
	lda p2
	ora p2+1
	bne fok
			; insert before the first free buffer so far
	ldy #0
	lda flist
	sta (p3),y
	iny
	lda flist+1
	sta (p3),y
	lda p3
	sta flist
	ldy p3+1
	sty flist+1
	jsr bmerge
#if 0	/*def DEBUGMEM*/
jsr printmem
#endif
	clc
	rts
fok			; insert to list
	ldy #1
	lda p+1		;lda (p2),y
	sta (p3),y
	dey
	lda p		;lda (p2),y
	sta (p3),y
	lda p3
	sta (p2),y
	iny
	lda p3+1
	sta (p2),y

	lda p3
	ldy p3+1
	jsr bmerge
	lda p2
	ldy p2+1
	jsr bmerge
#if 0	/*def DEBUGMEM*/
jsr printmem
#endif	
	clc
	rts
	.)

/* split buffer xr at size a/y for first part. return new buffer ID in x */
&bsplit	.(
	stx slot
#ifdef DEBUGMEM
pha
tya
pha
DB("^m^jbsplit buffer ")
txa
jsr EHexout
pla
pha
jsr EHexout
pla
tay
pla
pha
jsr EHexout
jsr ECrlfout
pla
#endif

	sta slotrlln,x
	pha
	tya
	sta slotrhln,x
	pla

	clc
	adc #MINBUF-1
	and #MINMASK
	sta p2
	bcc l0
	iny
l0 	sty p2+1
	tya
	cmp slothlen,x
	bcc ok
	bne oops
	lda p2
	cmp slotllen,x
	bcc ok
	beq oknull
oops	rts
ok	jsr getbslot
	bcs oops
	ldy slot
	clc
	lda slotladr,y
	adc p2
	sta slotladr,x
	lda slothadr,y
	adc p2+1
	sta slothadr,x
	sec
	lda slotllen,y
	sbc p2
	sta slotllen,x
	lda slothlen,y
	sbc p2+1
	sta slothlen,x
	
	lda p2
	sta slotllen,y
	lda p2+1
	sta slothlen,y
	
oknull	
#ifdef DEBUGMEM
DB("^m^jsplit buffer @")
	txa
	jsr EHexout
	lda slothadr,x
	jsr EHexout 
	lda slotladr,x
	jsr EHexout 
	lda slothlen,x
	jsr EHexout 
	lda slotllen,x
	jsr EHexout 
	jsr ECrlfout
#endif
	clc
	rts
	.)

/* truncate buffer xr to size a/y */
&btrunc	.(
	jsr bsplit
	bcs oops
	jmp bfree
oops	rts
	.)

/* realloc buffer xr to size a/y */
/* produce assemble errror
&brealloc .(
	.)
*/

/* get adress of buffer */
&getbadr .(
	lda slotladr,x
	ldy slothadr,x
	clc
	rts
	.)

/* get length of buffer */
&getblen .(
	lda slotrlln,x
	ldy slotrhln,x
	clc
	rts
	.)

/* get free buffer-ID slot */
getbslot .(
	ldx #0
l0
	clc
	lda slotladr,x
	ora slothadr,x
	beq found
	inx
	cpx #MAXSLOT
	bcc l0
found
	rts
	.)

/* check if two buffers (i.e. a/y plus following) can be merged */
bmerge	.(
	sta p
	sty p+1
	ldy #2
	clc
	lda (p),y
	adc p
	sta p3
	iny
	lda (p),y
	adc p+1
	sta p3+1
	ldy #0
	lda (p),y
	cmp p3
	bne nomerge
	iny
	lda (p),y
	cmp p3+1
	bne nomerge
merge
	ldy #2
	clc
	lda (p3),y
	adc (p),y
	sta (p),y
	iny
	lda (p3),y
	adc (p),y
	sta (p),y
	ldy #0
	lda (p3),y
	sta (p),y
	iny
	lda (p3),y
	sta (p),y
nomerge
	clc
	rts
	.)

#if 1 /*def DEBUGMEM*/
&printmem .(
DB("^m^jMemory Free List:^m^j")
	lda flist
	sta p
	lda flist+1
	sta p+1
	ldx #STDERR
loop
	lda p+1
	jsr EHexout
	lda p
	jsr EHexout
	lda #"["
	jsr Fputc
	ldy #3
	lda (p),y
	jsr EHexout
	dey
	lda (p),y
	jsr EHexout
	DB("]->")
	ldy #1
	lda (p),y
	jsr EHexout
	dey
	lda (p),y
	jsr EHexout
	jsr ECrlfout

	ldy #1
	lda (p),y
	pha
	dey
	lda (p),y
	sta p
	pla
	sta p+1
	ora p
	bne loop
	rts
	.)
#endif

	.)


