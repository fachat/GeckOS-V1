

/****************************************************************************
   
    OS/A65 Version 1.3.11
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1996 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/


/***************************************************************************
 * Here are the user routines (open, close etc)
 */


tcbno  	=sysmem
-sysmem	+=1

	; server struct:
	; remote_ip, remote_port, local_port, flag, queue_packet
echo_srv 
	.byte 0,0,0,0, 0,0, 7,0, SFL_MULT
	.word tcp_echo_queue-1, 0, tcp_sig_close-1
discard_srv 
	.byte 0,0,0,0, 0,0, 9,0, SFL_MULT
	.word tcp_disc_queue-1, 0, tcp_sig_close-1
chargen_srv 
	.byte 0,0,0,0, 0,0, 19,0, SFL_MULT
	.word tcp_disc_queue-1, tcp_chargen_loop-1, tcp_sig_close-1

+user_init .(
	lda #<echo_srv
	ldy #>echo_srv
	jsr tcp_listen
	lda #<discard_srv
	ldy #>discard_srv
	jsr tcp_listen
	lda #<chargen_srv
	ldy #>chargen_srv
	jsr tcp_listen

	rts
	;jmp fstcp_init
	.)

rx_queue_packet .(
	tax

	ldy #TCB_SERVICE
	lda (tcbp),y
	sta srv
	iny
	lda (tcbp),y
	sta srv+1

	ldy #SRV_QUEUE+1
	lda (srv),y
	pha
	dey
	lda (srv),y
	pha

	rts
	.)

+tcp_abort .(
	jsr settcb
	bcs notcb

	ldy #TCB_STATE
	lda (tcbp),y
	cmp #TCP_LISTEN
	beq del
	cmp #TCP_SYNTXD
	beq del

	cmp #TCP_CLOSING
	bcs ok
	jsr send_reset
del
	;lda #TCP_CLOSED
	;sta (tcbp),y
	jsr tclose
	clc
	rts
notcb	lda #TE_NOCONN
	.byt $2c
closing	lda #TE_CLOSING
	sec
	rts
ok	clc
	rts
	.)

+tcp_close .(
	jsr settcb
	bcs notcb
&tcp_sig_close
	ldy #TCB_STATE
	lda (tcbp),y
	cmp #TCP_LISTEN
	beq del
	cmp #TCP_SYNTXD
	beq del

	cmp #TCP_SYNRXD
	bne c1
	
	ldy #TCB_NTXBUF
	lda (tcbp),y
	beq c1a
	ldy #TCB_FLAG
	lda (tcbp),y
	ora #1
	sta (tcbp),y
	clc
	rts

c1	cmp #TCP_ESTAB
	bne c2
c1a	jsr send_fin
	ldy #TCB_STATE
	lda #TCP_FINW1
	sta (tcbp),y
	clc
	rts

c2	cmp #TCP_CLOSEW
	bne closing
	jsr send_fin
	ldy #TCB_STATE
	lda #TCP_CLOSING
	sta (tcbp),y
	clc
	rts
del
	;lda #TCP_CLOSED
	;sta (tcbp),y
	jsr tclose
	clc
	rts
notcb	lda #TE_NOCONN
	.byt $2c
closing	lda #TE_CLOSING
	sec
	rts
	.)

+tcp_listen .(
	sta srv
	sty srv+1
	jsr gettcb
	bcs notcb

	ldy #TCB_SERVICE
	lda srv
	sta (tcbp),y
	iny
	lda srv+1
	sta (tcbp),y

	ldy #SRV_LPORT
	lda (srv),y
	tax
	iny
	lda (srv),y
	ldy #TCB_TRGP
	sta (tcbp),y
	iny
	txa
	sta (tcbp),y
	
	ldy #TCB_STATE
	lda #TCP_LISTEN
	sta (tcbp),y
	clc
	;rts
notcb	rts
	.)

+tcp_open .(
	sta srv
	sty srv+1
	jsr gettcb
	bcs notcb

	ldy #TCB_SERVICE
	lda srv
	sta (tcbp),y
	iny
	lda srv+1
	sta (tcbp),y

	ldy #SRV_RIP
l0	lda (srv),y
	sta (tcbp),y
	iny	
	cpy #SRV_RIP+4
	bcc l0

	ldy #TCB_TRGIP
l1	lda MyIP-TCB_TRGIP,y
	sta (tcbp),y
	iny
	cpy #TCB_TRGIP+4
	bcc l1

	ldy #SRV_RPORT
	lda (srv),y
	tax
	iny
	lda (srv),y
	ldy #TCB_SRCP+1
	sta (tcbp),y
	dey
	txa
	sta (tcbp),y

	jsr getlport

	ldy #TCB_TRGP
	sta (tcbp),y
	iny
	txa
	sta (tcbp),y

	jsr iniseq

	ldy #TCB_STATE
	lda #TCP_SYNTXD
	sta (tcbp),y

 	jsr send_syn
	clc
notcb	rts
	.)

getlport .(	/* TODO: wrap around, check if already used */
	lda #1
	clc
	adc lport
	sta lport
	tax
	lda #0
	adc lport+1
	sta lport+1
	rts

lport 	.word 1024
	.)

signal_user .(
sig	=sysmem
-sysmem	+=1

	tax
	ldy #TCB_SERVICE
	lda (tcbp),y
	sta srv
	iny
	lda (tcbp),y
	sta srv+1
	
	ldy #SRV_SIGNAL
	lda (srv),y
	iny
	ora (srv),y
	beq nosig
	lda (srv),y
	pha
	dey
	lda (srv),y
	pha
	txa
nosig
	rts
	.)

