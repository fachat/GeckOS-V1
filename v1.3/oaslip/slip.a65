
/****************************************************************************
   
    OS/A65 Version 1.3.9
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1996 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/


/**********************************************************************/
/* 				SLIP				      */
/*		Serial Line Internet Protocol Driver		      */
/*								      */
/* Driver connects STDIN/OUT with a serial line internet protocol     */
/* 								      */
/* Options:							      */
/*   ROM							      */
/*   NOPRG							      */
/* 								      */
/**********************************************************************/

#ifndef ROM

#define	DEBUG
/*#define	DEBUGMEM*/
/*#define	DEBUGPKT*/
#define	CHARIN

#if 1
#define	DB(A)	.(:jmp ll0:ll1 .byt A,0:ll0 lda #<ll1:ldy #>ll1:jsr ETxtout:.):
#else
#define	DB(a)
#endif


#define	MY_IP		192,168,0,13
#define	MAXOQUEUE	4
#define	INBUF		64

#define	C64

#ifdef C64
#define	STDIOADDR $f000
#endif

#include "oa1sj.a65"
#include "oa1str.def"
#include "oa1fs.def"
#include "stdio.a65"


#define	MAXSLOT	16
#define	IPBUFFER 32*256		/* must be within one (4k) page for MMU! */
#define	MTU	1024

/*#define	NOPRG*/

PRGSTART  =$4000

#ifndef SLIPDEV
#define	SLIPDEV	0
#endif

#endif

/**********************************************************************/
/*	SLIP constants						      */

#define	SL_END		192
#define	SL_ESC		219
#define	SL_ESC_END	220	
#define	SL_ESC_ESC	221	

/**********************************************************************/
/*	Internet structs					      */

#define	IPH_VER		0
#define	IPH_SERVICE	1
#define	IPH_LEN		2
#define	IPH_ID		4
#define	IPH_FL		6
#define	IPH_TTL		8
#define	IPH_PROT	9
#define	IPH_CSUM	10
#define	IPH_SRC		12
#define	IPH_TRG		16

#define	ICMP_TYPE	0
#define	ICMP_CODE	1
#define	ICMP_CSUM	2

/**********************************************************************/

          .(
#ifdef ROM

          .word PRGEND
          .byt  PK_PRG
          .byt  8
          .byt  SLIPDEV,SLIPDEV
          .word PRG
#ifndef ROMTEST
          .byt  $8,$8,$9,$9,$a,$a,$b,$b,$c,$c,$d,$d,$e,$e,<-1
#else
          .byt $c,$1c,$d,$1d,$e,$1e,<-1
#endif /* ROMTEST */

          .byt  "shell",0,"shell b c:auto.bat",0

#else /* ROM */

/*------------------------------------------------------------------------*/

#ifndef NOPRG
          ;.word $800
          *=PRGSTART
          .word 0
          .byt PK_PRG
          .byt 8
          .word 0
          .word PRG
          .byt <-1
#else
          .word PRGSTART
          *=PRGSTART

#endif /* NOPRG */

#endif /* ROM */

/*------------------------------------------------------------------------*/

#ifndef NOMMU

syszp     =$80
sysmem    =$1800
sysblk    =PRGSTART

#endif

#echo slip:
#print sysmem
#print sysblk
#print syszp

/**********************************************************************/

PRG	.(

qp	=syszp
qd	=syszp+2
-syszp	+=4
ql	=sysmem
qlen	=sysmem+2
qslot	=sysmem+4
-sysmem	+=5

	jsr binit
	bcs exit
DB("^m^jbinit ok^m^j")
#ifndef CHARIN
	jsr ibufinit
#endif
	
	jsr oinit
	bcs exit
DB("^m^joinit ok^m^j")
	jsr iinit
DB("iinit ok^m^j")
	bcs exit
	jsr tcpinit
	bcc doloop
exit	rts

MyIP	.byt MY_IP

doloop
	jsr loopin
	jsr loopout
	jsr tcploop
	jsr SUSPEND
	jmp doloop

/******************** output loop ***********************/
	.(

omode	=sysmem
ol	=sysmem+1
onslot	=sysmem+3
oslot	=sysmem+4
-sysmem	+=MAXOQUEUE+4

op	=syszp
-syszp	+=2

&oinit	.(
	lda #0
	sta onslot
	sta omode
	clc
	rts
	.)

&loopout .(
	lda omode
	bne inwork
	ldy onslot
	bne newpacket
ende	rts
newpacket
	ldx oslot
	jsr getbadr
	sta op
	sty op+1
	jsr getblen
	sta ol
	sty ol+1
	lda #1
	sta omode
inwork
	cmp #1
	bne esc1
	lda #SL_END
	ldx #STDOUT
	jsr PUTC
	bcs ende
	inc omode
	lda omode
esc1	
	cmp #2
	bne esc2
next	ldy #0
	lda (op),y
	cmp #SL_END
	beq escape
	cmp #SL_ESC
	beq escape
	ldx #STDOUT
	jsr PUTC
	bcs ende
incp	
	inc op
	bne l0
	inc op+1
l0	lda ol
	bne l1
	dec ol+1
l1	dec ol

	lda ol
	ora ol+1
	bne next

	inc omode
	lda omode
esc2
	cmp #3
	bne esc3
	lda #SL_END
	ldx #STDOUT
	jsr PUTC
	bcs ende
			; free buffer slot
	ldx oslot
	jsr bfree

	dec onslot
	ldy #0
l2	cpy onslot
	beq reset
	lda oslot+1,y
	sta oslot,y
	iny
	bne l2

reset	lda #0
	sta omode
ende2	rts

escape	lda #4
	sta omode
esc3
	cmp #4
	bne esc4
	lda #SL_ESC
	ldx #STDOUT
	jsr PUTC
	bcs ende2
	inc omode
	lda omode
esc4
	cmp #5
	bne reset
	ldy #0
	lda (op),y
	cmp #SL_ESC
	beq escesc
	cmp #SL_END
	bne wrongesc
	lda #SL_ESC_END
	.byt $2c
escesc	lda #SL_ESC_ESC
wrongesc
	ldx #STDOUT
	jsr PUTC
	bcs ende2
	lda #2
	sta omode
	jmp incp
	.)

&queueslot .(	; queue slot XR for output
	ldy onslot
	cpy #MAXOQUEUE
	bcs drop
	txa
	sta oslot,y
	inc onslot
	rts
drop
	DB("Packet dropped due to full queue^m^j")
	jsr bfree
	rts
	.)

	.)

/******************** input loop ************************/
	.(

islot	=sysmem
ist	=sysmem+1	; 0=send data, $80= escaped
ilen	=sysmem+2
ihl	=sysmem+4
ipl	=sysmem+5
idlen	=sysmem+7
-sysmem	+=9
ip	=syszp
id	=syszp+2
-syszp	+=4
iend	=sysmem		;iend	=syszp+8
-sysmem	+=2		;-syszp	+=10

&iinit	
	lda #<-1
	sta islot
	clc
	rts

startin
	lda #<MTU
	ldy #>MTU
	jsr balloc
	bcs oops

	stx islot
iresp	sta ip			/* reset packet */
	sty ip+1
	clc
	adc #<MTU
	sta iend
	tya
	adc #>MTU
	sta iend+1

	lda #0
	sta ist
	clc
#ifdef DEBUGMEM
	rts
oops	
DB("startin Oops!^m^j")
jsr printmem
#else
oops	rts
#endif	

#ifndef CHARIN
inbuf	.(

ibuf 	=sysmem
-sysmem	+=INBUF
len	=sysmem
rp	=sysmem+1
-sysmem	+=2
p	=syszp
-syszp	+=2

	lda len
	bne buffd

	lda #<ibuf
	sta p
	lda #>ibuf
	sta p+1
	ldy #p
	ldx #STDIN
	lda #INBUF
	jsr GETB
	bcs err
	sta len
	lda #0
	sta rp
buffd
	ldx rp
	lda ibuf,x
	inx
	stx rp
	cpx len
	bcc ok
	ldx #0
	stx len
ok	
	clc
err	rts


&&ibufinit
	lda #0
	sta len
	clc
	rts
	.)
#endif

&loopin	.(
	bit islot
	bpl running
	jsr startin
	bcs ende
running
#ifdef CHARIN
	ldx #STDIN
	jsr GETC
#else
	jsr inbuf
#endif
	bcc gotbyt
ende 	rts
gotbyt
	cmp #SL_END
	beq gotpacket
	cmp #SL_ESC
	bne noesc
	sta ist
	beq loopin
noesc
	bit ist
	bpl noescape
	cmp #SL_ESC_ESC
	beq isesc
	cmp #SL_ESC_END
	bne noescape
	lda #SL_END
	.byt $2c
isesc	lda #SL_ESC
noescape
	ldy #0
	sty ist
	sta (ip),y
	inc ip
	bne l1
	inc ip+1
l1
	lda ip+1
	cmp iend+1
	bcc loopin
	bne discard
	lda ip
	cmp iend
	bcc loopin
DB("input buffer overflow!^m^j")
&discard
	ldx islot
	jsr getbadr
	jmp iresp	; no inloop, because if only SL_ENDs are sent, this
			; would become an almost infinite loop

gotpacket
	ldx islot
	lda ip
	sta iend
	ldy ip+1
	sty iend+1
	and #1
	beq even	; fill up with nullbyte if length is odd
	lda #0
	tay
	sta (ip),y
even
	jsr getbadr
	sta ip
	sty ip+1
	cmp iend
	bne ok
	cpy iend+1
	beq discard	; zero length packet received
ok

#if 1 /*def DEBUGPKT*/
	/* so what now? */
DB("Received Packet: ip=")
lda ip+1:jsr EHexout:lda ip:jsr EHexout: jsr ECrlfout
#if 0
	jsr printpacket

DB("^m^jip=")
lda ip+1:jsr EHexout:lda ip:jsr EHexout
DB("^m^jiend=")
lda iend+1:jsr EHexout:lda iend:jsr EHexout
#endif
#endif

	/* sanity checks */
	/* header length */
	ldy #IPH_LEN	; length in hi/lo format in IP header
	lda (ip),y
	sta ilen+1
	iny
	lda (ip),y
	sta ilen

#if 0 /*def DEBUGPKT*/
DB("^m^jiph->len=")
lda ilen+1
jsr EHexout
lda ilen
jsr EHexout
jsr ECrlfout
#endif
	clc
	lda ilen
	adc ip
	php
	cmp iend
	bne discp
	plp
	dey
	lda ilen+1
	adc ip+1
	cmp iend+1
	beq lenok
	php
discp	plp
	jmp discardlen
lenok
	/* header checksum */
	lda #0
	sta ipl+1
	ldy #IPH_VER
	lda (ip),y
	and #$0f
	asl
	asl
	sta ihl
	sta ipl
	clc
	adc ip
	sta id		; start of datagram data
	lda ip+1
	adc #0
	sta id+1

	lda ilen
	sec
	sbc ihl
	sta idlen
	lda ilen+1
	sbc #0
	sta idlen+1

	lda ipl
	ldy ipl+1
	ldx #ip
	jsr checksum3

#if 0 /*def DEBUGPKT*/
php
pha
txa
pha
DB("Header Checksum=")
pla
tay
jsr EHexout
pla
pha
jsr EHexout
jsr ECrlfout
tya
tax
pla
plp
#endif

	bcs discardcs

	/* check my IP address */
	ldy #IPH_TRG
l2 	lda MyIP-IPH_TRG,y
	cmp (ip),y
	beq bla
	jmp discardip
bla
	iny
	cpy #IPH_TRG+4
	bcc l2

	/**** so that packet is valid -> process it ****/
	/* ip has a pointer to the packet, ipl the header length */
	/* id has a pointer to the packet data, idl the data length */
	/* ilen has the total packet length */

	ldy #IPH_PROT
	lda (ip),y

	cmp #1
	bne noicmp
	jmp icmp
noicmp
	cmp #6
	bne notcp
	jmp tcprx
notcp
jsr EHexout
	DB("Packet discarded: unknown protocol^m^j")

	jmp discard

discardcs
	DB("Packet discarded: IP Header checksum^m^j")
disc	jmp discard

discardip
	DB("Packet discarded: wrong IP^m^j")
	jmp discard

discardlen
	DB("Packet discarded: length mismatch^m^j")
	jmp discard

	.)


	/* computes IP header checksum and returns it in a/x */
	/* address (a/y) + # of 16 bit words parameter (x) */
&checksum3 .(

tmp	=sysmem
len	=sysmem+3
-sysmem	+=5
p	=syszp
-syszp	+=2

	sec
	sbc #1
	sta len
	tya
	sbc #0
	sta len+1
	bcs uf
	rts
uf
	lda 0,x
	sta p
	lda 1,x
	sta p+1

#if 0
DB("Check: ")
lda p+1:jsr EHexout: lda p: jsr EHexout:lda #" ": jsr ECout
lda len+1:jsr EHexout: lda len: jsr EHexout: jsr ECrlfout
#endif
	lda #0
	sta tmp
	sta tmp+1
	sta tmp+2
	ldy #0
loop	
	iny
	lda tmp
	clc
	adc (p),y
	sta tmp
	lda tmp+1
	dey
	adc (p),y
	sta tmp+1
	bcc l0
	inc tmp+2
l0
	iny
	iny
	bne l1
	inc p+1
l1	
	lda len
	sec
	sbc #2
	sta len
	bcs l1a
	lda len+1
	sbc #0
	sta len+1
	bcc loope	; underflow (even size) -> end
l1a	lda len		
	ora len+1
	bne loop

l1b	lda (p),y
	clc
	adc tmp+1
	sta tmp+1
	bcc loope
	inc tmp+2
loope
	lda tmp
	clc
	adc tmp+2
	pha
	lda tmp+1
	adc #0
	eor #$ff
	tax
	pla
	eor #$ff

	bne err
	cpx #0
	bne err
	clc
	rts
err	sec
	rts
	.)

#if 0
	/* computes IP header checksum and returns it in a/x */
	/* address (a/y) + # of 16 bit words parameter (x) */
&checksum2 .(

tmp	=sysmem
len	=sysmem+3
-sysmem	+=5
p	=syszp
-syszp	+=2

	sta p
	sty p+1

	ldy #3
	lda (p),y
	sta len+1
	dey
	lda (p),y
	sec
	sbc #1		; dec length by one - for odd/even length handling
	sta len
	bcs x1
	lda len+1
	bne endx	; underflow -> length < 1 -> return
	tax
	clc
	rts
endx
	dec len+1
x1
	dey
	lda (p),y
	tax
	dey
	lda (p),y
	sta p
	stx p+1
#if 0
DB("Check: ")
lda p+1:jsr EHexout: lda p: jsr EHexout:lda #" ": jsr ECout
lda len+1:jsr EHexout: lda len: jsr EHexout: jsr ECrlfout
#endif
	lda #0
	sta tmp
	sta tmp+1
	sta tmp+2
	ldy #0
loop	
	iny
	lda tmp
	clc
	adc (p),y
	sta tmp
	lda tmp+1
	dey
	adc (p),y
	sta tmp+1
	bcc l0
	inc tmp+2
l0
	iny
	iny
	bne l1
	inc p+1
l1	
	lda len
	sec
	sbc #2
	sta len
	bcs l1a
	lda len+1
	sbc #0
	sta len+1
	bcc loope	; underflow (even size) -> end
l1a	lda len		
	ora len+1
	bne loop

l1b	lda (p),y
	clc
	adc tmp+1
	sta tmp+1
	bcc loope
	inc tmp+2
loope
	lda tmp
	clc
	adc tmp+2
	pha
	lda tmp+1
	adc #0
	eor #$ff
	tax
	pla
	eor #$ff

	bne err
	cpx #0
	bne err
	clc
	rts
err	sec
	rts
	.)

#endif
#if 0
	/* computes IP header checksum and returns it in a/x */
	/* address (a/y) + # of 16 bit words parameter (x) */
&checksum_old .(

tmp	=sysmem
len	=sysmem+3
-sysmem	+=5
p	=syszp
-syszp	+=2

	sta p
	sty p+1

	txa
	asl
	sta len		; length in byte

	lda #0
	sta tmp
	sta tmp+1
	sta tmp+2
	ldy #0
loop	
	iny
	lda tmp
	clc
	adc (p),y
	sta tmp
	lda tmp+1
	dey
	adc (p),y
	sta tmp+1
	bcc l0
	inc tmp+2
l0
	iny
	iny
	bne l1
	inc p+1
l1
	cpy len
	bcc loop

	lda tmp
	clc
	adc tmp+2
	pha
	lda tmp+1
	adc #0
	eor #$ff
	tax
	pla
	eor #$ff
	bne err
	cpx #0
	bne err
	clc
	rts
err	sec
	rts
	.)
#endif

#if 0 /*def DEBUGPKT*/
printpacket .(
end 	=sysmem
-sysmem	+=2
	ldy #0
	lda (ip),y
	and #$0f
	asl
	asl
	clc
	adc #16
	sta end

	ldy #0
l0
	lda (ip),y
	jsr EHexout
	lda #" "
	ldx #STDERR
	jsr Fputc
	iny
	cpy end
	beq lend
	tya
	and #7
	bne l0
	jsr ECrlfout
	jmp l0
lend
	DB("^m^jHeader Checksum")
	lda #0
	sta ipl+1
	ldy #IPH_VER
	lda (ip),y
	and #$0f
	asl
	asl
	sta ipl
	lda ipl
	ldy ipl+1
	ldx #ip
	jsr checksum3
	pha
	txa
	jsr EHexout
	pla
	jsr EHexout
#if 0
	DB("^m^jData Checksum")
	lda idlen
	ldy idlen+1
	ldx #id
	jsr checksum3
	pha
	txa
	jsr EHexout
	pla
	jsr EHexout
#endif
	jsr ECrlfout
	clc
	rts
	.)
#endif

#include "slicmp.a65"
#include "sltcp.a65"

	.)

/**********************************************************************/
/* Output on STDERR			 			      */

	.(
XR	=sysmem
-sysmem	+=1

&ECout	.(
	stx XR
	ldx #STDERR
	jsr Fputc
	ldx XR
	rts
	.)

&ECrlfout .(
	stx XR
	ldx #STDERR
	lda #13
	jsr Fputc
	lda #10
	jsr Fputc
	ldx XR
	rts
	.)

&EHexout  .(
	  stx XR
          pha
          lsr
          lsr
          lsr
          lsr
          jsr nibout
          pla
          and #$0f
nibout    ldx #STDERR
	  clc
          adc #"0"
          cmp #"9"+1
          bcc nibok
          adc #6
nibok     jsr Fputc
	  ldx XR
	  rts
          .)

&ETxtout
	  .(
tp        =syszp
-syszp	  +=2

          sta tp
          sty tp+1
	  stx XR
	  ldx #STDERR
          ldy #0
tol       lda (tp),y
          beq tole
          jsr Fputc
          iny
          bne tol
          inc tp+1
          bne tol
tole
	  ldx XR
          clc
          rts
          .)

	.)


#include "slmem.a65"

	.)

#print sysmem
#print sysblk
#print syszp

PRGEND    .)

