

#define   flag_data      %00000001
#define   flag_page      %00000010
#define   ANZ_DRV        26

          .(
&tpstr    =sysmem
tplen     =sysmem+1
&tpdrv    =sysmem+2
filenr    =sysmem+3
cmd       =sysmem+4
-sysmem   +=5

#ifndef NOSH
tpenv     =sysmem
fh        =sysmem+1
fz        =syszp
-syszp    +=2
-sysmem   +=1+P_TAB+30
#endif

&ropenfile lda #FS_OPEN_RD              /* FS-Kommando Lesen            */
          .byt $2c
&wopenfile lda #FS_OPEN_WR              /* FS-Kommando Schreiben        */
          .(
          sta cmd                       /* speichern                    */
          jsr GETSTR                    /* Stream holen                 */
          bcs tpe                       /* und speichern                */
          stx tpstr
          lda cmd
          jsr openf                     /* Datei îffnen                 */
          bcc tpe                       /* Ok dann Ende                 */
          ldx tpstr                     /* ansonsten                    */
          jsr FRESTR                    /* Stream wieder freigeben      */
          sec
tpe       ldx tpstr                     /* Stream-Nummer als Returnwert */
          rts

&openf    sta cmd
          ;jsr getdrv
          ;bcs tpfa
          ldy LZEI                      /* Parameter fÅr xsetname       */
          ;ldy #FS_OPEN_NAME
          jsr xsetname                  /* Name aus Kommandozeile in PCBUF */
          ;sta tpdrv
          ;sta PCBUF+FS_OPEN_DRV
          sty LZEI
          txa                           /* LÑnge der FS_OPEN-Struktur   */
          tay                           /* in y-Register fÅr Send       */
          ;sty tplen
          ldx tpstr                     /* Stream-Nummer                */
          stx PCBUF+FS_OPEN_STR         /* in PCBUF                     */
          lda #0;jsr getpfad
          sta PCBUF+FS_OPEN_PFAD        /* Pfad nicht gÅltig            */
          lda cmd                       /* Lesen oder Schreiben         */
          ldx #SEND_FM                  /* an File-Systems schicken     */
          ;ldy tplen
          jsr SEND                      /* Open losschicken             */
          bcs tpfa                      /* Fehler dann Ende             */
          sec                           /* bei Receive warten           */
          jsr RECEIVE                   /* EmpfÑngt RÅckmeldung         */
          ldx PCBUF+FS_X_FIL            /* File-Nummer (wird nicht mehr */
          stx filenr                    /* benîtigt)                    */
          cmp #1                        /* c=1 bei Fehler               */
tpfa      rts
          .)

#ifndef NOSH
&loadbef  .(

cnt       =sysmem
dyr       =sysmem+1
stdin     =sysmem+2
stdout    =sysmem+3
stderr    =sysmem+4
lzei      =sysmem+5

-sysmem   +=6

          lda LZEI
          sta lzei
          jsr getdrv
          bcs pip1
          tay
          jsr CHRGOT
          bne pip1
          tya
          jsr SETDRV
          clc
          rts
pip1      lda lzei
          sta LZEI

          ldx #STDIN     ; I/O-preset
          stx stdin
          lda #SC_REG_RD
          jsr STRCMD

pipe      ldx #STDOUT
          stx stdout
          lda #SC_REG_WR
          jsr STRCMD
          
          ldx #STDERR
          stx stderr
          lda #SC_REG_WR
          jsr STRCMD
                    
          lda LZEI
          sta lzei
          jsr ropenfile
          bcs tpe        ; sofort rts
          
          ldx tpstr      ; Datei-Startadr
          jsr IN
          bcs tpf        ; SC_NUL
          sta fz
          ldx tpstr
          jsr IN
          bcs tpf        ; SC_NUL
          sta fz+1
          ora fz
          beq lbtask     ; null ist Task, <>0 ist Prg
          
          lda stdin      ; bei Prg muû STDIN bleiben
          cmp #STDIN
          beq lb0
          jmp tpfx       ; SC_NUL->tpstr, clstdxxx
          
tpe       rts

lb0       .(
          lda fz         ; Prg
          sta fh
          lda fz+1
          sta fh+1
lb1       ldx tpstr
          jsr IN
          bcs lb2
          ldy #0
          sta (fz),y
          cmp (fz),y
          bne tpf
          inc fz
          bne lb1
          inc fz+1
          bne lb1
lb2       jsr tpf
          jmp (fh)
          .)
          
tpf       ldx tpstr
          lda #SC_NUL
          jsr STRCMD
          sec
          rts

lbtask                   ; Task-Start
          ldy #0
lb3       ldx tpstr
          jsr IN
          bcs tpfxx      ; =tpfx= SC_NUL+clstdxxx
          sta fh,y
          iny
          cpy #P_TAB     
          bcc lb3        ; Ende Header=Start xTab
          ldx tpstr
          jsr IN
          bcs tpfxx
          sta fh,y
          iny
          cpy #P_TAB+30  ; Ende der Tabelle
          bcs tpfxx      ; ja dann zuviel
          cmp #128
          bcc lb3        ; mpos nicht <0 dann weiter

          lda fh+P_KIND
          and #$7f
          cmp #PK_PRG    ; normales Prg
          beq lbprgx
          cmp #PK_FS     ; File-System (Streams ignorieren)
          beq lbfsx
          cmp #PK_DEV    ; Device Special File
          beq lbdevs
tpfxx     jmp tpfx       ; anderes dann Ende
lbprgx    jmp lbprg
lbfsx     jmp lbfs

lbdevs    .(
          lda fh+P_ADR
          sta fz
          lda fh+P_ADR+1
          and #%00001111
          ora #%01000000
          sta fz+1
          lda fh+P_TAB+1 ; Exchange vorgegeben
          bne lbd1       ; dann keinen Speicher suchen
          jsr GETMEM
          bcs tpfxx      ; kein Speicher dann Ende
          txa
lbd1      sta fh+P_TAB+1
          ldy #4
          ldx #OWNTASK
          sec
          jsr SETBLK
          bcs tpfxx      ; Speichertausch nicht mîglich dann ende
          sta tpenv      ; alter Block

          lda fh+P_TAB   ; m(emory)pos(ition)=0 -> Stack init
          bne lbdev
          lda #$fe
          sta $41ff ; Stack
          
lbdev     ldx tpstr      ; Datei laden
          jsr IN
          bcs lbde
          ldy #0
          sta (fz),y
          inc fz
          bne lbdev
          inc fz+1
          bne lbdev
lbde      
          lda tpenv      ; alten Block wieder in Speicherlandschaft
          ldx #OWNTASK
          ldy #4
          sec
          jsr SETBLK     
          lda fh+P_TAB   ; Device anmelden
          sta PCBUF+REGDEV_MPOS
          lda fh+P_TAB+1
          sta PCBUF+REGDEV_MBLK
          lda fh+P_ADR
          sta PCBUF+REGDEV_ADR
          lda fh+P_ADR+1
          sta PCBUF+REGDEV_ADR+1
          lda #DC_REGDEV
          jsr DEVCMD
          jsr tpf
          clc
          rts
          ;ldx tpstr
          ;lda #SC_NUL
          ;jmp STRCMD
          .)
   
lbfs      .(
          jsr lbe        ; clrstdin/out/err
          lda #STDNUL
          sta stdin
          sta stdout
          sta stderr
          
&lbprg    ldy fh+P_MEM
          jsr GETENV     ; Environment holen
          bcs tpfx       ; fehler ->SC_NUL+clstdxxx
          stx tpenv

          ldx #P_TAB     ; Exchange-Tabelle
lbm1      lda fh,x       ; zuende 
          bmi lbm2       ; dann weiter
          tay            ; mpos nach y
          inx
          lda fh,x
          inx
          stx cnt
          cmp #0         ; kein Speicher
          bne lbm3       ; dann weiter
          sty dyr
          jsr GETMEM
          bcs lbex       ; kein freier Speicher dann Ende
          txa
          ldy dyr
lbm3      ldx tpenv
          sec
          jsr SETBLK
          bcs lbex       ; Tausch nicht gegangen-> Ende
          tax
          jsr FREMEM
          ldx cnt
          jmp lbm1
lbex      
          ldx tpenv
          jsr FREENV
&tpfx     
          ldx tpstr
          lda #SC_NUL
          jsr STRCMD
lbe       
          jsr clrstdin
          jsr clrstdout
          jsr clrstderr
          sec
          rts
          
lbey      ldx tpenv
          jsr FREENV
          jmp lbe

lbeyt     lda cmd
          cmp #"|"
          bne lbey
          ldx stdout
          lda #SC_NUL
          jsr STRCMD
          jmp lbey          

lbm2      lda fh+P_ADR
          sta fz
          lda fh+P_ADR+1
          sta fz+1
lbm4      ldx tpstr
          jsr IN
          bcs lbm5       ; Ende der Datei
          ldx #fz
          ldy tpenv
          jsr WRITE      ; in env schreiben
          inc fz
          bne lbm4
          inc fz+1
          bne lbm4
lbm5      
          ldx tpstr      ; datei abschliessen
          lda #SC_NUL
          jsr STRCMD

          jsr dup        ; stdxxx setzen -> cmd=Endezeichen
          bcs lbey

          lda cmd        ; Endezeichen
          bne la1
          inc LZEI
la1       cmp #"|"
          bne la2
          jsr clrstdout
          jsr GETSTR
          bcs lbeyt      ; FreEnv+clstdxxx+test pipe (StdIn-Stream)
          stx stdout
la2       
          lda lzei       ; start des Namens
          sta LZEI
          jsr getdrv     ; drive Åberspringen
          ldy LZEI
          ldx #FORK_NAME
          jsr setname    ; name in Fork-Struct
          lda lzei
          sta LZEI       ; das ganze von vorne
          stx lzei       ; LÑnge Fork-Struct
          jsr getdrv     ; drive Åberspringen
          ldy lzei       
          ldx LZEI
lbn0      lda #" "       ; diesmal in command-Line
          sta dyr
lbn1      lda IOBUF,x
          sta PCBUF,y
          beq endnam
          inx
          iny
          cmp #" "       ; space is ok
          beq lbn1
          cmp #34        ; AnfÅhrungszeichen 
          bne lbn2
          sta dyr
          beq cpnamlp    ; dann Name Åbertragen
lbn2      cmp #">"       ; I/O-Commands Åberspringen
          beq skpnam
          cmp #"<"
          beq skpnam
          cmp #"!"
          beq skpnam
          cmp #"|"
          beq endnam0    ; ende dieses Commands
          cmp #"&"
          beq endnam0
cpnamlp   lda IOBUF,x    ; ansonst Name Åbertragen
          sta PCBUF,y
          beq endnam
          inx
          iny
          cmp dyr
          bne cpnamlp    
          beq lbn0
skpnam    dey
skp       lda IOBUF,x
          beq endnam
          inx
          cmp #" "       ; space vor Namen
          beq skp
          cmp #">"       ; extra IO vor namen
          beq skp
          cmp #"!"
          beq skp        ; Åberspringen
          cmp #34
          bne s1
          sta dyr
s1        lda IOBUF,x    ; Namen Åberspringen
          beq endnam
          inx
          cmp dyr
          bne s1
          beq lbn0

endnam0   dey
endnam    stx LZEI
          lda #0
          sta PCBUF,y    ; command-Line abschliessen
          iny
          sty tplen

          lda stdin
          sta PCBUF+FORK_STDIN
          lda stdout
          sta PCBUF+FORK_STDOUT
          lda stderr
          sta PCBUF+FORK_STDERR
          lda tpenv
          sta PCBUF+FORK_ENV
          lda fh+P_ADR
          sta PCBUF+FORK_ADR
          lda fh+P_ADR+1
          sta PCBUF+FORK_ADR+1
          
          ldy tplen
          jsr FORK            ; Task starten

          jsr clrstdin
          lda stdout
          sta stdin
          jsr clrstdout
          jsr clrstderr

          ldx cmd
          bne nowait          ; ende kein Nullbyte
          ldx tpenv
          jsr WTERM           ; dann Wait bis Term
          clc
          rts
nowait    cpx #"|"            ; endezeichen = |
          bne nopipe
          jmp pipe            ; dann Pipe
nopipe    clc
          rts
          .)
          
&&PDUP    .(
          ldx #STDIN
          stx stdin
          lda #SC_REG_RD
          jsr STRCMD
          ldx #STDOUT
          stx stdout
          lda #SC_REG_WR
          jsr STRCMD
          ldx #STDERR
          stx stderr
          lda #SC_REG_WR
          jsr STRCMD

          jsr dup
          bcs ende

          lda stdin
          ldx #STDIN
          sec
          jsr DUP
          sta stdin
          
          lda stdout
          ldx #STDOUT
          sec
          jsr DUP
          sta stdout
          
          lda stderr
          ldx #STDERR
          sec
          jsr DUP
          sta stderr
          clc
ende      php
          jsr clrstdin
          jsr clrstdout
          jsr clrstderr
          plp
          rts
          .)
    
dup       .(

fl        =sysmem
-sysmem   +=1

lio0      ldx LZEI
lio1      lda IOBUF,x
          beq lioex
          inx
          cmp #" "
          beq lio1
          cmp #"|"
          beq lioex
          cmp #"&"
          beq lioex
          cmp #">"
          bne lin
          sta fl
          lda IOBUF,x
          cmp #"!"
          bne a1
          sta fl
          inx
a1        stx LZEI
          jsr wopenfile
          bcs lex
          jsr clrstdout
          lda tpstr
          sta stdout
          lda fl
          cmp #"!"
          bne lio0
          jsr clrstderr
          ldx tpstr
          stx stderr
          lda #SC_REG_WR
          jsr STRCMD
          jmp lio0
lioex     jmp lioe
lin       cmp #"<"
          bne lerr
          stx LZEI
          jsr ropenfile
lex       bcs le 
          jsr clrstdin
          lda tpstr
          sta stdin
          jmp lio0
lerr      cmp #"!"
          bne lother
          sta fl
          lda IOBUF,x
          cmp #">"
          bne a2
          sta fl
          inx
a2        stx LZEI
          jsr wopenfile
          bcs le 
          jsr clrstderr
          lda tpstr
          sta stderr
          lda fl
          cmp #">"
          bne lio0a
          jsr clrstdout
          ldx tpstr
          stx stdout
          lda #SC_REG_WR
          jsr STRCMD
lio0a     jmp lio0
lother    cmp #34        ; Hochkomma
          bne lname
lo1       lda IOBUF,x
          beq lioe
          inx
          cmp #34
          bne lo1
          jmp lio1
lname     lda IOBUF,x
          beq lioe
          inx
          cmp #" "
          bne lname
          jmp lio1
lioe      stx LZEI
          sta cmd
          clc
le        rts
          .)

clrstdin  .(
          ldx stdin
          lda #SC_NUL
          jmp STRCMD
          .)

clrstdout .(
          ldx stdout
          lda #SC_EOF
          jmp STRCMD
          .)

clrstderr .(
          ldx stderr
          lda #SC_EOF
          jmp STRCMD
          .)

&&COPY    .(
          jsr ropenfile
          bcs cpe
          lda #FS_OPEN_WR
          jsr openf
          bcc cpe
          ldx tpstr
          lda #SC_NUL
          jsr STRCMD
          sec
cpe       rts
          .)
          .)

&COPYCON  .(
          jsr wopenfile
          bcs cce
          bcc cclx
ccl       lda #TC_CR
          ldx tpstr
          jsr OUT
cclx      jsr CRLFOUT
          jsr MLINEIN
          lda IOBUF
          cmp #"@"
          beq ccc
          ldy #0
ccl2      lda IOBUF,y
          beq ccl
          ldx tpstr
          jsr OUT
          iny
          bne ccl2
ccc       ldx tpstr
          lda #SC_EOF
          jsr STRCMD
cce       rts
          .)
          
&TYPE     .(
          jsr ropenfile
          bcs tpe1
          jsr CRLFOUT
tl        ldx tpstr
          jsr IN
          bcs tpft
          jsr SEROUT
          jmp tl
tpft      ldx tpstr
          lda #SC_NUL
          jsr STRCMD
          clc
          rts
          .)

&BATCH    .(
          jsr ropenfile
          bcs tpe1
          lda tpstr
          jsr opstdin
&tpe1     rts
          .)
#endif
          .)

#ifndef NOSH

PDEVCMD   .(
          jsr CHRGOT
          beq pde
          ldy LZEI
          ldx #0
          jsr setname
          sty LZEI
          lda #DC_GNUM
          jsr DEVCMD
          bcs pde
          
          stx tpdrv
          jsr CHRGOT
          ldy #0
          sty tpstr
l0        ldx LZEI
l1        lda cmdtab,y
          beq l3
          sec
          sbc IOBUF,x
          beq l2
          cmp #<-$20
          beq l2
          inc tpstr
          lda tpstr
          cmp #Anzdevcmd
          bcs pde
l4        iny
          lda cmdtab,y
          bne l4
          iny
          bne l0
l2        inx
          iny
          bne l1
l3        lda IOBUF,x
          beq l5
          cmp #" "
          bne pde
l5        stx LZEI
          jsr GETADR
          tay
          lda tpstr
          ldx tpdrv
          jsr DEVCMD
pde       rts

Anzdevcmd =12
cmdtab    .asc "IRQ^@RES^@GETSTR^@PUTSTR^@"
          .asc "RXON^@TXON^@RXOFF^@TXOFF^@"
          .asc "SPEED^@HANDSHAKE^@STATUS^@"
          .asc "EXIT^@"
          .)

PGETSTR   .(
          jsr GETSTR
          bcs pge
          lda #"="
          jsr SEROUT
          txa
          jsr HEXOUT
          clc
pge       rts
          .)

PFRESTR   .(
          jsr CHRGOT
          beq pfe
          jsr GETADR
          bcs pfe
          tax
          jsr FRESTR
pfe       rts
          .)
          
FORMAT    .(
          ldy LZEI
          lda IOBUF,y
          cmp #"/"
          bne f1
          iny
          lda IOBUF,y
          cmp #" "
          beq f1
          iny
          and #%00001111
          tax
f1        sty LZEI
          lda #FS_FORMAT
          sta dcmd
          stx PCBUF+FS_CMD_PFAD
          jsr getdrv
          bcc f2
fe        rts
f2        ;sta tpdrv
          sta PCBUF+FS_CMD_DRV
          cmp #$80
          bcs fe
          ldy LZEI
          ldx #FS_CMD_NAME
          jsr setname
          jmp fx
          
&MKDIR    lda #FS_MKDIR
          .byt $2c
&RMDIR    lda #FS_RMDIR
          .byt $2c
&CHKDSK   lda #FS_CHKDSK
          .byt $2c
&DELETE   lda #FS_DELETE

dcmd      =sysmem
-sysmem   +=1

          ldx #0
          sta dcmd
          stx PCBUF+FS_CMD_PFAD
          ;jsr getdrv
          ;bcc d1
          ;rts
d1        ldy LZEI
          ;ldy #FS_CMD_NAME
          jsr xsetname
          ;sta tpdrv
          ;sta PCBUF+FS_CMD_DRV
fx        lda dcmd
+sxcmd    pha
          txa
          tay
          pla
          ldx #SEND_FM
          jsr SEND
          bcs dx
          sec
          jsr RECEIVE
dx        cmp #1
          rts
          .)

RENAME    .(
          ;jsr getdrv
          ;bcc r1
          ;rts
r1        ldy LZEI
          ;ldy #FS_CMD_NAME
          jsr xsetname
          ;sta PCBUF+FS_CMD_DRV
          jsr setname
          ;ldx PCBUF+FS_CMD_DRV
          lda #0;jsr getpfad
          sta PCBUF+FS_CMD_PFAD
          lda #FS_RENAME
          jmp sxcmd
          .)

#endif

DIRECTORY .(

dirstr    =sysmem
dirlen    =sysmem+1
flag      =sysmem+2
count     =sysmem+3

-sysmem   +=4

          lda #flag_data
          sta flag
          ldy LZEI
          lda IOBUF,y
          cmp #"/"
          bne de
d0        iny
          lda IOBUF,y
          beq de
          jsr TOUPPER
          cmp #"P"
          bne d1
          lda flag
          ora #flag_page
          sta flag
          bne d0
d1        cmp #"D"
          bne d2
          lda flag
          and #$ff-flag_data
          sta flag
          bne d0
d2        cmp #" "
          bne d0
de        sty LZEI
          ;jsr getdrv
          ;bcc d1x
          ;lda #<-1
d1x       ;sta PCBUF+FS_OPEN_DRV
          ldy LZEI
          ;ldy #FS_CMD_NAME
          jsr xsetname
          ;sta PCBUF+FS_OPEN_DRV
          sty LZEI
          stx dirlen
          ldx PCBUF+FS_OPEN_DRV
          lda #0;jsr getpfad
          sta PCBUF+FS_OPEN_PFAD
          jsr GETSTR
          bcs dire
          stx dirstr
          stx PCBUF+FS_OPEN_STR
          lda #FS_OPEN_DR
          ldx #SEND_FM
          ldy dirlen
          jsr SEND
          bcs dirf
          sec
          jsr RECEIVE
          cmp #1
          bcs dirf
          jsr setout
          jsr showloop
dirf      pha
          ldx dirstr
          jsr FRESTR
          pla
          cmp #1
dire      rts

showloop  lda #0
          sta count
sloop slp ldy #0
          ldx dirstr
          jsr IN
          bcc slp2
          lda #0
          rts
sl1       ldx dirstr
          jsr IN
          bcs sle
slp2      sta PCBUF,y
          iny
          cpy #FS_DIR_NAME
          beq sl1
          bcc sl1
          cmp #0
          bne sl1

          jsr CRLFOUT

          lda PCBUF+FS_DIR_MODE
          cmp #FS_DIR_MOD_FRE
          beq sl00
          cmp #FS_DIR_MOD_NAM
          bne sl0
          lda flag
          and #flag_data
          bne sl0
sl00      lda flag
          and #flag_data
          beq slp
          jmp showfre

sle       rts
sl0       ldy #FS_DIR_NAME
sl2       lda PCBUF,y
          beq sl13
          jsr SEROUT
          iny
          bne sl2
sl13      lda flag
          and #flag_data
          beq sll
sl3a      cpy #24+FS_DIR_NAME
          bcs sl14
          lda #" "
          jsr SEROUT
          iny
          bne sl3a
sl14      lda PCBUF+FS_DIR_MODE
          cmp #FS_DIR_MOD_FIL
          bne sl15
          jsr showlen
          jmp sll
sl15      cmp #FS_DIR_MOD_NAM
          bne sl16
          lda #<namtxt
          ldy #>namtxt
          jsr TSERO
          jmp sll
sl16      cmp #FS_DIR_MOD_DIR
          bne sll
          lda #<dirtxt
          ldy #>dirtxt
          jsr TSERO
sll       lda flag
          and #flag_page
          beq sllx
          inc count
          lda count
          cmp #23
          bcc sllx
          lda #0
          sta count
          lda #<pagetxt
          ldy #>pagetxt
          jsr TSERO
          jsr SERIN
sllx      jmp sloop

showfre   jsr showlenx
          lda #<fretxt
          ldy #>fretxt
          jsr TSERO
          jmp sll

showlenx  lda #<PCBUF+FS_DIR_LEN
          ldy #>PCBUF+FS_DIR_LEN
          ldx #" "
          jmp ldezout

showlen   jsr showlenx
          jsr SSPOUT
          lda PCBUF+FS_DIR_DAY
          jsr DEZOUT
          jsr PNTOUT
          lda PCBUF+FS_DIR_MONTH
          jsr DEZOUT
          jsr PNTOUT
          lda PCBUF+FS_DIR_YEAR
          jsr DEZOUT
          jsr SSPOUT
          lda PCBUF+FS_DIR_HOUR
          jsr DEZOUT
          lda #":"
          jsr SEROUT
          lda PCBUF+FS_DIR_MIN
          jmp DEZOUT

dirtxt    .asc "<DIR>^@"
namtxt    .asc "<NAME>^@"
fretxt    .asc " BYTES FREE^@"
pagetxt   .asc "^M^J<TASTE>^@"

          .)

          .(
ekz       =sysmem
pdrv      =sysmem+1
pfad      =sysmem+2
#ifndef NOSH
-sysmem   +=2+MAXLEN     ; Pfad
#else
-sysmem   +=3            ; Pfad nur mit Nullbyte gesetzt 
#endif

HK        =34

&inipfad  .(
          lda #0
&&SETDRV  sta pdrv
          pha
          lda #0
          sta pfad
          pla
          clc
          rts
          .)

#ifndef NOSH
&CD       .(
          lda LZEI
          clc
          adc #<IOBUF
          pha
          lda #0
          adc #>IOBUF
          tay
          pla
          jsr Getname
          lda #<pdrv
          ldy #>pdrv
          ldx #MAXLEN
          jmp Chdir
          
/*
          jsr getdrv
          ldy #0
          bcs cd00
          cmp #$80
          bcs cd1
          sta pdrv
cd1       ldx LZEI
          lda #" "
          sta ekz
          dex
gn1       inx
          lda IOBUF,x
          beq gn3
          cmp #" "
          beq gn1
          cmp #HK
          bne gn2
          inx
          sta ekz
gn2       lda IOBUF,x
          beq gn3
          cmp ekz
          beq gn3a
          sta pfad,y
          inx
          iny
          cpy #MAXLEN-2
          bcc gn2
          jsr cd00
          sec
          rts

gn3a      inx
gn3       lda pfad-1,y
          cmp #DIRSIGN
          beq gnn
          lda #DIRSIGN
          sta pfad,y
          iny
gnn       lda #0
          sta pfad,y
          clc
          rts
cd00      sty pdrv
          sty pfad
          clc
          rts
*/
          .)
#endif

&tstdrv   .(
          sec
          sbc #"A"
          bcc xdrv
          cmp #"Z"-"A"
          bcc okdrv
          sbc #$20
          bcc xdrv
          cmp #"z"-"a"
          bcc okdrv
xdrv      lda #<-1
okdrv     rts
          .)

&getdrv   .(
          jsr CHRGOT
          bne t1
          sec
          rts
t1        jsr tstdrv
          tax
          ldy LZEI
          iny
          lda IOBUF,y    
          cmp #":"
          bne t0a
          iny
          sty LZEI
          txa
          clc
          rts
t0a       lda #<-1
          clc
          rts
          .)

&xsetname .(   ; y=iobuf
          tya
          sta ekz
          clc
          adc #<IOBUF
          pha
          lda #0
          adc #>IOBUF
          tay
          pla
          jsr Getname
          tya
          clc
          adc ekz
          sta ekz
          lda #<pdrv
          ldy #>pdrv
          jsr Usedir
#ifdef SHOW
   lda PCBUF+FS_OPEN_DRV
   jsr HEXOUT
   lda #<PCBUF+FS_OPEN_NAME
   ldy #>PCBUF+FS_OPEN_NAME
   jsr TSERO
#endif
          lda PCBUF+FS_OPEN_DRV
          ldy ekz
          rts
/*
          cmp #$80
          bcc x1
         
x1b       lda IOBUF,x
          cmp #" "
          bne x1a
          inx
          bne x1b
          
x1a       cmp #"/"
          beq xnn
          cmp #HK
          bne x1c
          lda IOBUF+1,x
          cmp #"/"
          beq xnn
          
x1c       stx ekz
          ldx #0
          
x2        lda pfad,x
          beq x3
          sta PCBUF,y
          inx
          iny
          bne x2
          
x3        cpx #1
          bne x4         ; wenn nur "/" dann Åberlesen
          dey
x4        ldx ekz
xnn       lda pdrv
x1        pha
          jsr setname
          pla
          rts
*/
          .)
          
&setname  .(   /* y=iobuf, x=pcbuf */
xx        =sysmem
-sysmem   +=1

          tya
          sta xx
          clc
          adc #<IOBUF
          pha
          lda #0
          adc #>IOBUF
          tay
          pla
          jsr Set2name
          tya
          clc
          adc xx
          tay
          clc
          rts
          .)
          .)

 
